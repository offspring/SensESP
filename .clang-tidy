CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,           value: aNy_CasE  }
  - { key: readability-identifier-naming.VariableCase,           value: lower_case }
  - { key: readability-identifier-naming.ClassMemberCase,        value: lower_case }
  - { key: readability-identifier-naming.ClassMemberSuffix,      value: _          }
  - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,  value: _          }
  - { key: readability-identifier-naming.EnumConstantCase,         value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantPrefix,       value: k         }
  - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k         }
  - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix,     value: k         }
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: 1   }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: 1   }
  - { key: readability-function-cognitive-complexity.IgnoreMacros,  value: 1   }


Checks: >
    -*,
    bugprone-*,
    clang-analyzer-*,
    cppcoreguidelines-*,
    google-*,
    misc-*,
    modernize-*,
    portability-*,
    performance-*,
    readability-*,
    -bugprone-branch-clone,
    -bugprone-easily-swappable-parameters,
    -bugprone-signed-char-misuse,
    # -clang-analyzer-*,
    -clang-diagnostic-*,
    -cppcoreguidelines-avoid-c-arrays,
    -cppcoreguidelines-init-variables,
    -cppcoreguidelines-avoid-magic-numbers,
    # -cppcoreguidelines-bugprone-reserved-identifier,
    # -cppcoreguidelines-macro-usage,
    -cppcoreguidelines-owning-memory,
    -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
    -cppcoreguidelines-pro-bounds-constant-array-index,
    -cppcoreguidelines-pro-bounds-pointer-arithmetic,
    # -cppcoreguidelines-pro-type-member-init,
    # -cppcoreguidelines-pro-type-static-cast-downcast,
    # -cppcoreguidelines-pro-type-union-access,
    -cppcoreguidelines-avoid-non-const-global-variables,
    -hicpp-avoid-c-arrays,
    # -google-explicit-constructor,
    # -misc-include-cleaner,
    -misc-unused-parameters,
    -modernize-avoid-c-arrays,
    # -modernize-concat-nested-namespaces,
    -modernize-pass-by-value,
    # -modernize-raw-string-literal,
    # -modernize-use-default-member-init,
    -modernize-use-equals-default,
    # -modernize-use-nodiscard,
    -modernize-use-trailing-return-type,
    # -readability-avoid-const-params-in-decls,
    -readability-convert-member-functions-to-static,
    # -readability-delete-null-pointer,
    # -readability-else-after-return,
    -readability-identifier-length,
    -readability-identifier-naming,
    # -readability-implicit-bool-cast,
    -readability-implicit-bool-conversion,
    # -readability-isolate-declaration,
    -readability-magic-numbers,
    -readability-misplaced-array-index,
    # -readability-named-parameter,
    # -readability-redundant-member-init,
    -readability-simplify-boolean-expr

WarningsAsErrors: ''

HeaderFilterRegex: '(src/).*\\.h'
